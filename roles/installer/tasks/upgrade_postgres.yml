---

# If postgres version is not 12, and not an external postgres instance (when managed_database is yes), then run this playbook with include_tasks from database_configuration.yml
# If _postgres_image == 'postgres'. Use pg_upgrade.  Otherwise, use POSTGRESQL_UPGRADE=copy support

- name: Print debug that we got here in the upgrade playbook
  debug:
    msg: "HERE IN THE UPGRADE_POSTGRES.YML PLAYBOOK"

- name: Print debug that this is a Downstream Upgrade
  debug:
    msg: "DOWNSTREAM UPGRADE DETECTED"
  when: _postgres_image != "postgres"   # Maybe we should just have a global variable literally called `_downstream` and have it be a boolean (or _upstream)

- debug:
    msg: "{{ _postgres_image }}"

- name: Scale down Deployment for migration
  include_tasks: scale_down_deployment.yml
  when: create_statefulset_result.changed



- name: Set upgrade_postgres boolean
  set_fact:
    upgrade_postgres: true

# Users may need to prepare their 
- name: Set Postgres 12 Admin Password
  set_fact:
    pg_admin_password: testpassword

# Set pg admin password env var on stateful set with pg 12 image vars and a different  and wait for container to come up.  
-



# To solve the issue of needing pg 12 and 13 pods/deployment/service up at the same time, we will add the major version to the name of the object

- name: Set Postgres 12 routable host
  set_fact:
    pg_migration_remote_host: postgresql.{{ ansible_operator_meta.namespace }}.svc.cluster.local






# $ podman run -d --name postgresql_database \
#     -e POSTGRESQL_MIGRATION_REMOTE_HOST=172.17.0.2 \
#     -e POSTGRESQL_MIGRATION_ADMIN_PASSWORD=remoteAdminP@ssword \
#     [ OPTIONAL_CONFIGURATION_VARIABLES ]
#     rhel8/postgresql-13



# Create db stateful set for pg 13 and set POSTGRESQL_UPGRADE=copy and test it out



# 
#   # Find a way to know when ^^ is done, then start postgres:13
# - name: Create Database if no database is specified
#   k8s:
#     apply: true
#     definition: "{{ lookup('template', 'postgres.yaml.j2') }}"
#   register: create_statefulset_result
# 
# 






- name: Set flag signifying PostgreSQL has been upgraded
  set_fact:
    postgres_upgrade_complete: true
