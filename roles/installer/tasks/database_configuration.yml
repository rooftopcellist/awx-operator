---
- name: Check for specified PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ tower_postgres_configuration_secret }}'
  register: _custom_pg_config_resources
  when: tower_postgres_configuration_secret | length

- name: Check for default PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ meta.name }}-postgres-configuration'
  register: _default_pg_config_resources

- name: Check for specified old PostgreSQL configuration secret
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ tower_old_postgres_configuration_secret }}'
  register: _custom_old_pg_config_resources
  when: tower_old_postgres_configuration_secret | length

- name: Check for default old PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ meta.namespace }}'
    name: '{{ meta.name }}-old-postgres-configuration'
  register: _default_old_pg_config_resources

- name: Set old PostgreSQL configuration
  set_fact:
    # yamllint disable-line rule:line-length
    old_pg_config: '{{ _custom_old_pg_config_resources["resources"] | default([]) | length | ternary(_custom_old_pg_config_resources, _default_old_pg_config_resources) }}'  # noqa 204

- name: Set proper database name when migrating from old deployment
  set_fact:
    database_name: "{{ old_pg_config['resources'][0]['data']['database'] | b64decode }}"
    database_username: "{{ old_pg_config['resources'][0]['data']['username'] | b64decode }}"
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length

- name: Set PostgreSQL configuration
  set_fact:
    _pg_config: '{{ _custom_pg_config_resources["resources"] | default([]) | length | ternary(_custom_pg_config_resources, _default_pg_config_resources) }}'

- block:
    - name: Create Database configuration
      k8s:
        apply: true
        definition: "{{ lookup('template', 'tower_postgres_secret.yaml.j2') }}"

    - name: Read Database Configuration
      k8s_info:
        kind: Secret
        namespace: '{{ meta.namespace }}'
        name: '{{ meta.name }}-postgres-configuration'
      register: _generated_pg_config_resources
  when: not _pg_config['resources'] | default([]) | length

- name: Set PostgreSQL Configuration
  set_fact:
    pg_config: '{{ _generated_pg_config_resources["resources"] | default([]) | length | ternary(_generated_pg_config_resources, _pg_config) }}'

- name: Create Database if no database is specified
  k8s:
    apply: true
    definition: "{{ lookup('template', 'tower_postgres.yaml.j2') }}"
  when:
    - pg_config['resources'][0]['data']['type'] | default('') | b64decode == 'managed'

- name: Store Database Configuration
  set_fact:
    awx_postgres_user: "{{ pg_config['resources'][0]['data']['username'] | b64decode }}"
    awx_postgres_pass: "{{ pg_config['resources'][0]['data']['password'] | b64decode }}"
    awx_postgres_database: "{{ pg_config['resources'][0]['data']['database'] | b64decode }}"
    awx_postgres_port: "{{ pg_config['resources'][0]['data']['port'] | b64decode }}"
    awx_postgres_host: "{{ pg_config['resources'][0]['data']['host'] | b64decode }}"

- name: Set apiVersion and kind variables
  set_fact:
    api_version: '{{ hostvars["localhost"]["inventory_file"].split("/")[4:6] | join("/")  }}'
    kind: '{{ hostvars["localhost"]["inventory_file"].split("/")[6]  }}'

- name: Look up details for this deployment
  k8s_info:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ meta.name }}"
    namespace: "{{ meta.namespace }}"
  register: this_awx

- name: Migrate data from old Openshift instance
  import_tasks: migrate_data.yml
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length
    - this_awx['resources'][0]['status']['towerMigratedFromSecret'] is not defined
