---
- name: Set default pvc name
  set_fact:
    _default_backup_pvc: "{{ meta.name }}-backup-claim"

# by default, it will re-use the old pvc if already created (unless pvc is provided)
- name: Set PVC to use for backup
  set_fact:
    backup_pvc: "{{ tower_backup_pvc | default(_default_backup_pvc, true) }}"

# Check to make sure provided pvc exists, error loudly if not.  Otherwise, the management pod will just stay in pending state forever.
- name: Check provided PVC exists
  k8s_info:
    name: "{{ tower_backup_pvc }}"
    kind: PersistentVolumeClaim
    namespace: "{{ tower_backup_pvc_namespace }}"
  register: provided_pvc
  when:
    - tower_backup_pvc != ''

- name: Surface error to user
  block:
    - name: Set error message
      set_fact:
        error_msg: "{{ tower_backup_pvc }} does not exist, please create this pvc first."

    - name: Handle error
      import_tasks: error_handling.yml

    - name: Fail early if pvc is defined but does not exist
      fail:
        msg: "{{ error_msg }}"
  when:
    - tower_backup_pvc != ''
    - provided_pvc.resources | length == 0

- name: Delete any existing management pod
  community.kubernetes.k8s:
    name: "{{ meta.name }}-db-management"
    kind: Pod
    namespace: "{{ tower_backup_pvc_namespace }}"
    state: absent
    force: true
    wait: true

- name: Create management pod from templated deployment config
  community.kubernetes.k8s:
    name: "{{ meta.name }}-db-management"
    kind: Deployment
    state: present
    template: "management-pod.yml.j2"
    wait: true

- name: Check to make sure backup directory exists on PVC
  community.kubernetes.k8s_exec:
    namespace: "{{ tower_backup_pvc_namespace }}"
    pod: "{{ meta.name }}-db-management"
    command: >-
      bash -c "stat {{ tower_backup_dir }}"
  register: stat_backup_dir

- debug:
    msg: "{{stat_backup_dir}}"

- name: Error if backup dir is missing
  block:
    - name: Set error message
      set_fact:
        error_msg: "{{ tower_backup_dir }} does not exist, see the towerBackupDirectory status on your AWXBackup for the correct tower_backup_dir."

    - name: Handle error
      import_tasks: error_handling.yml

    - name: Fail early if backup dir provided does not exist
      fail:
        msg: "{{ error_msg }}"
  when:
    - tower_backup_dir != ''
    - stat_backup_dir.return_code != 0

- name: Make _definitions directory
  file:
    path: "_definitions"
    state: directory
    mode: '0700'
